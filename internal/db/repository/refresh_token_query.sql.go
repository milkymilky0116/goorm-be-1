// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: refresh_token_query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_token (refresh_token,user_id,expires_at) VALUES ($1, $2, $3) RETURNING id, refresh_token, user_id, expires_at, created_at, updated_at
`

type CreateRefreshTokenParams struct {
	RefreshToken string             `db:"refresh_token" json:"refresh_token"`
	UserID       *int64             `db:"user_id" json:"user_id"`
	ExpiresAt    pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken, arg.RefreshToken, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTokenById = `-- name: GetTokenById :one
SELECT id, refresh_token, user_id, expires_at, created_at, updated_at FROM refresh_token WHERE id = $1
`

func (q *Queries) GetTokenById(ctx context.Context, id int64) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getTokenById, id)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
